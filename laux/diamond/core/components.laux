Diamond.Components ??= {}

public class Diamond.Component
    _get _set base
    _get _set parent

    constructor(parent, base = "Panel": string, props = {}: table, overwrittenProps = {}: table)
        self:setParent(parent)
        self:setBase(base)

        Diamond:log(overwrittenProps)

        for i, v in pairs(overwrittenProps) do
            if istable(props[i]) then
                props[i].value = v
            else
                props[i] = v
            end
        end

        self.props = props
    end

    static accessorFunc(this, panel: Panel|table, variable: string, force, methods)
        local name = variable:gsub("^%l", string.upper)
        local forces = {
            [FORCE_STRING] = () -> return tostring(self) end,
            [FORCE_NUMBER] = () -> return tonumber(self) end,
            [FORCE_BOOL] = () -> return tobool(self) end
        }

        methods = methods or {
            ["get"] = true,
            ["set"] = true,
        }

        if methods["get"] then
            panel["get" .. name] = () ->
                local x = panel[variable]
                return istable(x) and x.value or x
            end
        end

        if methods["set"] then
            panel["set" .. name] = (value) ->
                panel[variable] = forces?[force] or value

                if self.onPropsChanged and isfunction(self.onPropsChanged) then
                    self:onPropsChanged(variable, value, self.props ?? {})
                end
            end
        end
    end

    create()
        local base = self:getBase()
        local parent = self:getParent()
        local props = self.props

        local component = vgui.Create(base, parent)
        component.props = props
        component = self:render(component)

        function component:updateProps(props = {}: table)
            for i, v in pairs(table.Merge(self.props, props)) do
                Diamond.Component:accessorFunc(component, i, istable(v) and v?.force, istable(v) and v?.methods)
                component[i] = istable(v) and v.value or v
            end
        end
        component:updateProps(props)

        if component.initialize and isfunction(component.initialize) then
            component:initialize(component.props)
        end

        return component
    end

    render(...) return ... end
end

--[[
    public class Diamond.Components.App extends Diamond.Component
        constructor(parent, props)
            super(parent, "DPanel", {
                title = "Window"
            }, props)
        end

        render(component)
            function component:initialize(props)
                self:setTitle("Test")
            end

            function component:onPropsChanged(index, value, props)
                print(index, value)
                PrintTable(props)
            end

            function component:Paint(w, h)
                draw.RoundedBox(0, 0, 0, w, h, Color(255, 0, 0))
                draw.SimpleText(self:getTitle(), "Trebuchet24", w / 2, h / 2, color_white, 1, 1)
            end

            return component
        end
    end

    do
        local frame = vgui.Create("DFrame")
        frame:SetSize(700, 600)
        frame:Center()
        frame:MakePopup()

        local panel = Diamond.Components.App(frame):create()
        panel:Dock(FILL)
    end
]]