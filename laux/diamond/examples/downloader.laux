local theme = Diamond.Theme

class Log extends Diamond.Component
	constructor(parent, props)
		super(parent, "DPanel", {
			timestamp = {
				value = os.time(),
				force = FORCE_NUMBER
			},
			description = {
				value = "No description",
				force = FORCE_STRING
			},
			icon = {
				value = "f15b",
				force = FORCE_STRING
			}
		}, props)
	end

	static formatTime(timestamp = 0: number)
		local now = os.time()
		local diff = now - timestamp

		return os.date("%M:%S ago", diff)
	end

	render(component)
		function component:initialize(props)
			local parent = self:GetParent()
			self.index = parent._logs and #parent._logs + 1 or 1

			parent._logs = parent._logs or {}
			parent._logs[self.index] = self

			self.color = theme:lighten("background", self.index % 2 == 1 and 0.5 or 0.75)

			self.panel = vgui.Create("DPanel", self)
			self.panel:Dock(LEFT)
			self.panel:DockMargin(16, 16, 16, 16)
			self.panel.Paint = (this, w, h) =>
				draw.RoundedBox(3, 0, 0, w, h, theme:lighten("background", 0.2))
				Diamond:DrawIcon(self:getIcon(), "Solid", h / 2, w / 2, h / 2, 1, 1, theme:lighten("text", -0.25))
			end

			self.description = vgui.Create("DPanel", self)
			self.description:Dock(FILL)
			self.description:DockMargin(0, 16, 16, 16)
			self.description.Paint = (this, w, h) =>
				Diamond:DrawDualText({
					text = self:getDescription(),
					font = Diamond:Font(20)
				}, {
					text = Log.formatTime(self:getTimestamp()),
					font = Diamond:Font(18)
				}, w, h, w / 2, h / 2, 1, 1)
			end
		end

		function component:Paint(w, h)
			local isFirst = self.index <= 1
			local isLast = self.index == #self:GetParent():GetChildren()

			draw.RoundedBoxEx(theme:get("radius"), 0, 0, w, h, self.color, isFirst, isFirst, isLast, isLast)
		end

		function component:OnSizeChanged(w, h)
			local panel = self:GetParent():GetParent()

			local sum = 0
			for i, v in ipairs(panel:GetChildren() or {}) do
				sum += v:GetTall()
			end

			panel:GetVBar():AnimateTo(sum, 0.75)
		end

		function component:PerformLayout(w, h)
			self:SetTall(self:GetParent():GetParent():GetTall() * 0.15)
			self.panel:SetWide(h * 0.7)
		end

		return component
	end
end

Diamond.Examples:add("downloader", (client) =>
	local downloader = Diamond.Downloader("diamond/downloader")
	local content = {
            {
                index = "I6no46e",
            },

            {
                url = "https://api.datamuse.com/words?sl=baguette",
                extension = "json"
            },

            {
                url = "https://media.discordapp.net/attachments/721524785468932106/797735107338174464/5469a67.png",
            },

			{
				url = "https://raw.githubusercontent.com/chmilhane/diamond/main/laux/diamond/classes/downloader.laux",
				extension = "txt"
			},

			{
				url = "https://raw.githubusercontent.com/chmilhane/diamond/main/laux/diamond/classes/http/client.laux",
				extension = "txt"
			},

			{
				url = "https://raw.githubusercontent.com/chmilhane/diamond/main/laux/diamond/classes/collection.laux",
				extension = "txt"
			},

            {
                url = "https://www.dropbox.com/s/wcphnfttyn1g37e/hackerman.mp3?dl=1",
                extension = "mp3"
            },
	} -- temp

	local frame = Diamond.Components.Frame({
		title = "Downloader"
	}):create()
	frame:SetSize(ScrW() * 0.65, ScrH() * 0.7)
	frame:MakePopup()
	frame:Center()

	local extEnums = {
		["png"] = "f1c5",
		["jpg"] = "f1c5",
		["jpeg"] = "f1c5",
		["gif"] = "f1c5",
		["csv"] = "f6dd",
		["dat"] = "f573",
		["txt"] = "f15c",
		["json"] = "f15c",
		["mp3"] = "f1c7",
		["wav"] = "f1c7",
		["ogg"] = "f1c7",
	}

	function frame:log(desc, icon)
		local log = Log(self.logs.container, {
			description = desc,
		}):create()
		log:Dock(TOP)

		if icon then
			log:setIcon(icon)
		end
	end

	function frame:begginDownload(content: table)
		local promise = downloader:download(content)

		function promise:onProgressChanged(f, t)
			Diamond.Animations.LerpFunction(frame.progressBar.setFraction, frame.progressBar.getFraction, f / 100, frame.progressBar)

			local name = string.GetFileFromFilename(t.url)
			frame:log(`${name} (${t.extension}): Downloaded`, extEnums[t.extension])
		end

		promise:next((result) =>
			frame:log("All the files were downloaded!", "f019")
			frame.download:setDisabled(false)
		end)
	end

	local container = vgui.Create("Panel", frame)
	container:Dock(RIGHT)
	container:DockMargin(32, 32, 32, 32)

	frame.logs = Diamond.Components.Container(container, {
		title = "Logs",
		panel = "DScrollPanel"
	}):create()
	frame.logs:Dock(FILL)
	frame.logs:getContainer():GetVBar():SetWide(0)

	frame.download = Diamond.Components.Button(container):create()
	frame.download:Dock(BOTTOM)
	frame.download:DockMargin(0, 32, 0, 0)
	frame.download:SetText("Download")
	frame.download:SetTall(48)
	frame.download:setStyle("outlined")
	frame.download:setTranslationY(-4)
	frame.download.doClick = () ->
		self:setDisabled(true)
		frame:log("Download started", "f019")

		Diamond.Animations.LerpFunction(frame.progressBar.setFraction, frame.progressBar.getFraction, 0, frame.progressBar, 1, () =>
			frame:begginDownload(content)
		end)
	end

	-- local progressBar

	-- local iterations = 10
	-- for i = 1, iterations do
	-- 	timer.Simple(1 * i, () =>
	-- 		stopif not IsValid(logs.container)

			-- local log = Log(logs.container):create()
			-- log:Dock(TOP)

	-- 		Diamond.Animations.LerpFunction(progressBar.setFraction, progressBar.getFraction, progressBar:getFraction() + 1 / iterations, progressBar, 0.5)
	-- 	end)
	-- end

	local progress = Diamond.Components.Container(frame, {
		title = "Progress"
	}):create()
	progress:Dock(BOTTOM)
	progress:DockMargin(32, 32, 0, 32)

	frame.progressBar = Diamond.Components.Progress(progress, {
		border = false,
		fraction = 1
	}):create()
	frame.progressBar:Dock(FILL)

	local queue = Diamond.Components.Container(frame, {
		title = "Queue"
	}):create()
	queue:Dock(FILL)
	queue:DockMargin(32, 32, 0, 0)

	local _performLayout = frame.PerformLayout
	function frame:PerformLayout(w, h)
		_performLayout(self, w, h)

		container:SetWide(w * 0.35)
		progress:SetTall(h * 0.125)
	end
end)