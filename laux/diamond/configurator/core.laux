Diamond.Configurator.Cache = Diamond.Cache("Configurator")

public class Diamond.Configurator.Core
    _get _set package
    _get _set drawNumbers

    constructor(index: string)
        self.index = index:gsub(" ", "_"):lower()
        Diamond.Configurator.Cache:store(self.index, self)

        self.categories = {}
        self.settings = {}

        self:setDrawNumbers(false)
        self:addCategory("Introduction", "f7d9", "Diamond:Configurator:Tabs:Introduction")
    end

    editIntroduction(panel)
        self.categories[next(self.categories) ?? 1].panel = panel
    end

    addCategory(text: string, icon, panel)
        self.categories[#self.categories + 1] = {
            text = text,
            icon = icon,
            panel = panel
        }
    end

    add(category)

    end

    get(category, index)

    end

    set(category, index, value)

    end

    save()
        --> Bob :)
    end

    openMenu()
        local frame = vgui.Create("Diamond:Configurator:Core")
        frame:SetSize(ScrW() * 0.45, ScrH() * 0.55)
        frame:Center()
        frame:MakePopup()
        frame:SetConfigurator(self.index)
    end
end

do
    class Settings extends Diamond.Configurator.Core
        constructor()
            super("library")

            -- self:setPackage(Diamond.Package)
            self:setPackage({
                name = "BobAdminToolKit",
                color = Color(105, 81, 233)
            })

            self:setDrawNumbers(true)

            self:addCategory("General", "f14e")
            self:addCategory("Permissions", "f007", "Diamond:Configurator:Tabs:Permissions")
        end
    end

    local _settings = Settings()
    -- _settings:get(...)
end

stopif SERVER
local function commandHandler(client, command, args)
    local index = args[next(args)] ?? args[1]

    local configurator = Diamond.Configurator.Cache:get(index)
    if not configurator then
        Diamond:log(`Configuration not found! (${index})`)
    end

    configurator:openMenu()
end
concommand.Add("diamond_configurator", commandHandler)