Diamond.Configurator.Cache = Diamond.Cache("Configurator")

public class Diamond.Configurator.Core
    _get _set package
    _get _set drawNumbers

    constructor(index: string)
        self.index = index:gsub(" ", "_"):lower()
        Diamond.Configurator.Cache:store(self.index, self)

        self.categories = {}
        self.settings = {}

        self:setDrawNumbers(true)
        self:addCategory("Introduction", "f7d9", "Diamond:Configurator:Tabs:Introduction")
    end

    editIntroduction(panel)
        self.categories[next(self.categories) ?? 1].panel = panel
    end

    addCategory(text: string, icon, panel)
        self.categories[#self.categories + 1] = {
            text = text,
            icon = icon,
            panel = panel,
            configuration = {}
        }
    end

    getCategoryByNameOrId(category)
        local id = self.categories[category]
        if not id then
            local collection = Diamond.Collection(self.categories)
            id = collection:getKeyWhere("text", category, true)
        end
        return id
    end

    add(category, index: string|nil, value: table|string|number|boolean)
        local id = self:getCategoryByNameOrId(category)
        self.categories[id]["configuration"][index] = value
    end

    get(category, index)
        local id = self:getCategoryByNameOrId(category)
        return self.categories[id]["configuration"][index]
    end

    set(category, index, value)

    end

    setDefaultValueForCategory(category, value)
        local id = self:getCategoryByNameOrId(category)
        self.categories[id].default = value
    end

    save()
        --> Bob :)
        print("saved")
    end

    openMenu()
        local frame = Diamond.Components:create("Diamond:Configurator:Core")
        frame:SetSize(ScrW() * 0.45, ScrH() * 0.55)
        frame:Center()
        frame:MakePopup()
        frame:SetConfigurator(self.index)
    end
end

do
    class Settings extends Diamond.Configurator.Core
        constructor()
            super("library")

            -- self:setPackage(Diamond.Package)
            self:setPackage({
                name = "BobAdminToolKit",
                description = "The best administration solution for your Garry's Mod server!",
                color = Color(105, 81, 233)
            })

            self:setDrawNumbers(false)

            self:addCategory("General", "f14e")
            self:addCategory("Permissions", "f007", "Diamond:Configurator:Tabs:Permissions")
        end
    end

    local settings = Settings()
    settings:add("general", "language", "en")
    settings:add("permissions", "superadmin", {
        warns = {
            view = true,
            update = true,
            delete = true,
        },
        users = {
            view = true,
        }
    })
    settings:setDefaultValueForCategory("permissions", {
        warns = {
            view = false,
            update = false,
            delete = false,
        },
        users = {
            view = false,
        }
    })
    -- _settings:get(...)
end

stopif SERVER
local function commandHandler(client, command, args)
    local index = args[next(args)] ?? args[1]

    local configurator = Diamond.Configurator.Cache:get(index)
    if not configurator then
        Diamond:log(`Configuration not found! (${index})`)
    end

    configurator:openMenu()
end
concommand.Add("diamond_configurator", commandHandler)