public class Diamond.Network
	_get _set name

	constructor(name: string)
		self:setName(name)
		self:initialize()

		self.cache = Diamond.Cache()
	end

	initialize()
		local name = self:getName()

		if SERVER then
			util.AddNetworkString(name)
		end

		net.Receive(name, (len, client) =>
			local index = net.ReadUInt(6)
			local callback = self.cache:get(index)

			client = client or CLIENT and LocalPlayer()
			callback(len, client)
        end)
	end

	register(index: number, callback)
		self.cache:set(index, callback)
	end

	--[[
        * @param number index
        * @param function callback
        * @aram nil|Player|CRecipientFilter receiver
	]]
	send(index: number, callback, receiver)
		net.Start(self:getName())
		net.WriteUInt(index, 6)

		if callback and isfunction(callback) then
			callback(self)
		end

		if SERVER then
			net.Send(receiver)
		else
			net.SendToServer()
		end
	end

    static calculateRequiredBits(this, value: number, signed = false: boolean)
        return math.max(math.ceil(math.log(value) / math.log(2)) + (signed and 1 or 0), 1)
    end
end