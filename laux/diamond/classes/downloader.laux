public class Diamond.Downloader
    _get directory

    constructor(directory = "diamond/files": string)
        self.cache = {}
        self:setDirectory(directory)
    end

    --[[ private ]] checkDirectory(directory: string)
		if string.EndsWith(directory, "/") then
			directory = string.sub(directory, #directory - 1, #directory)
		end

        return directory
    end

    setDirectory(directory: string)
        self.directory = self:checkDirectory(directory)
    end

    async downloadOne(params: table)
        params.directory = params.directory and self:checkDirectory(string.Replace(params.directory, "{{ BASE }}", self:getDirectory())) or self:getDirectory()
        params.extension = params.extension or "png"
        params.url = params.url or params.index and "https://i.imgur.com/" .. params.index .. "." .. params.extension
        params.filename = params.filename or util.CRC(params.url)

        local path = params.directory .. "/" .. params.filename .. "." .. params.extension
        if self.cache[path] then return p:resolve(path) end

        self.cache[params.url] = params

        local client = Diamond.HttpClient()
        local response = await client:fetch({
            url = params?.url
        })

        file.CreateDir(params?.directory)
        file.Write(path, response:getContent()?.body)

        return {
            params = params,
            response = response,
        }
    end

    download(content: table)
        local res = {}
        local i = 1

        local function stack(index, callback)
            local params = content[index]
            stopif not params

            self:downloadOne(params):next((request) =>
                res[index] = request?.params

                if callback then
                    callback(index)
                end

                i++
                stack(i, callback)
            end, (e) => res[index] = { error = e } end)
        end

        stack(i, (index) =>
            if index == #content then
                p:resolve(res)
            end
        end)
    end

    get(url: string)
        return self.cache[url] ?? {}
    end
end

--[[
    - .txt
    - .dat
    - .json
    - .xml
    - .csv
    - .jpg
    - .jpeg
    - .png
    - .vtf
    - .vmt
    - .mp3
    - .wav
    - .ogg
]]

--[[
    local async function test()
        local downloader = Diamond.Downloader("diamond/files")

        local request = await downloader:downloadOne({
            index = "I6no46e"
        })

        -- local params = await downloader:download({
        --     {
        --         index = "I6no46e",
        --     },

        --     -- {
        --     --     directory = "%BASE%/json",
        --     --     url = "https://api.datamuse.com/words?sl=baguette",
        --     --     extension = "json"
        --     -- },

        --     -- {
        --     --     url = "https://www.dropbox.com/s/wcphnfttyn1g37e/hackerman.mp3?dl=1",
        --     --     extension = "mp3"
        --     -- },

        --     -- {
        --     --     url = "https://media.discordapp.net/attachments/721524785468932106/797735107338174464/5469a67.png",
        --     -- }
        -- })

        PrintTable(request)
    end
    test()
]]