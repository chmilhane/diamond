public class Diamond.Downloader
    _get directory

    constructor(directory)
        self.cache = {}

        if directory then
            self:setDirectory(directory)
        end
    end

    checkDirectory(directory: string)
		if string.EndsWith(directory, "/") then
			local len = #directory
			directory = string.sub(directory, len - 1, len)
		end

        return directory
    end

    setDirectory(directory: string)
        self.directory = self:checkDirectory(directory)
    end

    downloadOne(params: table)
        local p = Diamond.Promises.new()

        params.directory = params.directory and self:checkDirectory(string.Replace(params.directory, "%BASE%", self:getDirectory())) or self:getDirectory()
        params.extension = params.extension or "png"
        params.url = params.url or params.index and "https://i.imgur.com/" .. params.index .. "." .. params.extension
        params.filename = params.filename or util.CRC(params.url)

        local path = params.directory .. "/" .. params.filename .. "." .. params.extension
        if self.cache[path] then return p:resolve(path) end

        self.cache[params.url] = params

        http.Fetch(params.url, (body) =>
            file.CreateDir(params.directory)
            file.Write(path, body)

            params.content = body

            return p:resolve(params)
        end, (err) => p:reject(err) end)

        return p
    end

    download(content: table)
        local p = Diamond.Promises.new()
        local i = 1

        local res = {}

        local function stack(index, callback)
            local params = content[index]
            stopif not params

            self:downloadOne(params):next((params) =>
                res[index] = params

                if callback then
                    callback(index)
                end

                i++
                stack(i, callback)
            end, (err) => res[index] = { error = err } end)
        end

        stack(i, (index) =>
            if index == #content then
                p:resolve(res)
            end
        end)

        return p
    end

    get(url: string)
        return self.cache[url] ?? {}
    end
end

--[[
    - .txt
    - .dat
    - .json
    - .xml
    - .csv
    - .jpg
    - .jpeg
    - .png
    - .vtf
    - .vmt
    - .mp3
    - .wav
    - .ogg
]]

--[[
    local async function test()
        local downloader = Diamond.Downloader("diamond/files")

        local params = await downloader:download({
            {
                index = "I6no46e",
            },

            {
                directory = "%BASE%/json",
                url = "https://api.datamuse.com/words?sl=baguette",
                extension = "json"
            },

            {
                url = "https://www.dropbox.com/s/wcphnfttyn1g37e/hackerman.mp3?dl=1",
                extension = "mp3"
            },

            {
                url = "https://media.discordapp.net/attachments/721524785468932106/797735107338174464/5469a67.png",
            }
        })

        PrintTable(params)
    end
    test()
]]