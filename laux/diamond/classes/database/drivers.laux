Diamond.DB.Drivers ??= {}

class Driver
    static auto_increments()
        return "AUTO_INCREMENT"
    end
end

public class Diamond.DB.Drivers.MySQL extends Driver
    
end

public class Diamond.DB.Drivers.SQLite extends Driver
    static auto_increments()
        return "AUTOINCREMENT"
    end
end

public class Diamond.Collection
    constructor(tbl: table)
        self.tbl = tbl
    end

    where(key, value)
        local new = {}
        for k, v of self.tbl do
            continueif v[key] ~= value
            new[#new + 1] = v
        end
        self.tbl = new
        return self
    end

    whereIf(cond, key, value)
        stopif not cond
        return self:where(key, value)
    end

    map(func)
        local new = {}
        for k, v of self.tbl do
            new[#new + 1] = func(v, k)
        end
        self.tbl = new
        return self
    end

    mapWithKeys(func)
        local new = {}
        for k, v of self.tbl do
            local key, value = func(v, k)
            new[key] = value
        end
        self.tbl = new
        return self
    end

    regroup(key)
        local new = {}
        for k, v of self.tbl do
            new[v[key]] = new[v[key]] or {}
            new[v[key]][#new[v[key]] + 1] = v
        end
        self.tbl = new
        return self
    end

    first()
        return table.GetFirstValue(self.tbl)
    end

    get()
        return self.tbl
    end
end