class Theme
    _get currentColor
    _get currentTheme

    static Colors = {
        red = Color(237, 41, 57),
        orange = Color(255, 105, 0),
        yellow = Color(255, 191, 0),
        purple = Color(106, 79, 236),
        blue = Color(14, 87, 196),
        green = Color(0, 168, 107),
        cyan = Color(32, 174, 150),
        pink = Color(247, 106, 140),

        white = Color(255, 255, 255),
        black = Color(0, 0, 0),
    }

    static Themes = {
        light = {
            background = Color(212, 212, 212),
            text = Color(12, 12, 12),
            text = Color(0, 0, 0),
            radius = 8
        },

        dark = {
            background = Color(32, 32, 32),
            text = Color(255, 255, 255),
            text = Color(255, 255, 255),
            radius = 8
        },

        night = {
            background = Color(46, 49, 56),
            text = Color(255, 255, 255),
            text = Color(255, 255, 255),
            radius = 8
        }
    }

    constructor()
        self.path = Diamond.Package.Root .. "/theme.json"

        local content = util.JSONToTable(file.Read(self.path, "DATA") or "{}")
        self:setCurrentTheme(content.theme or "dark")
        self:setCurrentColor(content.color or "blue")
    end

    get(color: string|Color)
        return Theme.Colors[color] or Theme.Themes[self:getCurrentTheme()][color] or IsColor(color) and color or Theme.colors[self:getCurrentColor()]
    end

    setCurrentColor(color)
        stopif not Theme.Colors[color]

        local oldPreference = self.currentColor

        self.currentColor = color
        self:save()

        hook.Run("Diamond.ColorChanged", oldPreference, color)

        return self
    end

    setCurrentTheme(theme)
        stopif not Theme.Themes[theme]

        local oldTheme = self.currentTheme

        self.currentTheme = theme
        self:save()

        hook.Run("Diamond.ThemeChanged", oldTheme, theme)

        return self
    end

    getActiveTheme()
        return Theme.Themes[self:getCurrentTheme()]
    end

    lighten(color, fraction, alpha)
        local col = self:get(color)
        return Color(
            col.r + col.r * fraction,
            col.g + col.g * fraction,
            col.b + col.b * fraction,
            alpha and col.a + col.a * fraction or col.a
        )
    end

    lerp(ft, f, t)
        return Color(
            Lerp(ft, f.r, t.r),
            Lerp(ft, f.g, t.g),
            Lerp(ft, f.b, t.b)
        )
    end

    alpha(color, alpha)
        local col = self:get(color)
        return Color(col.r, col.g, col.b, alpha)
    end

    save()
        local { Root } = Diamond.Package
        if not file.IsDir(Root, "DATA") then
            file.CreateDir(Root)
        end

        file.Write(self.path, util.TableToJSON({
            theme = self:getCurrentTheme(),
            color = self:getCurrentColor()
        }, true))
    end

    getList()
        return {
            Themes = Theme.Themes,
            Colors = Theme.Colors
        }
    end
end

Diamond.Theme = Theme()