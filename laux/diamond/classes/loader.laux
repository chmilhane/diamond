DIAMOND_SERVER = 1
DIAMOND_CLIENT = 2
DIAMOND_SHARED = 3

public class Diamond.Loader
	_get _set package

	static Cache = {}

	static BasePackage = {
		Name = "Diamond",
		Root = "diamond",
		Color = Color(233, 83, 120),
		Assets = {
			["materials"] = true,
			["resource/fonts"] = true
		}
	}

	static BaseOptions = {
		Recursive = false,
		FilesToIgnore = {},
		DirectoriesToIgnore = {},
		Realms = {}
	}

	static Colors = {
		Text = Color(225, 225, 225),
		Success = Color(61, 255, 135),
		Skipped = Color(231, 128, 124)
	}

	static Realms = {
		[DIAMOND_SERVER] = (this, path) =>
			if (SERVER) then
				return include(path)
			end
		end,

		[DIAMOND_CLIENT] = (this, path) =>
			if (SERVER) then
				AddCSLuaFile(path)
			else
				return include(path)
			end
		end,

		[DIAMOND_SHARED] = (this, ...) =>
			this[DIAMOND_CLIENT](this, ...)
			return this[DIAMOND_SERVER](this, ...)
		end
	}

	constructor(package = {}: table)
		self:setPackage(table.Merge(Diamond.Loader.BasePackage, package))

		self.loadedFiles = {}
		self.downloadedAssets = {}

		self.startTime = SysTime()

		self:log("Loader initialized, waiting for instructions...")
	end

	private log(...)
		local { color, name } = self:getPackage()

		MsgC(color, `[${name}] `, SERVER and Color(137, 222, 255) or Color(255, 222, 102), "(" .. (SERVER and "SERVER" or "CLIENT") .. ") ", Diamond.Loader.Colors.Text, ...)
		Msg("\n")
	end

	private downloadAssets(directories: table)
		for i, v of directories do
			local path = i .. "/" .. self:getPackage().Root

			local files = file.Find(path .. "/*", "GAME")
			for _, file of files do
				local fullPath = path .. "/" .. file

				if SERVER then
					resource.AddSingleFile(fullPath)
				end

				self.downloadedAssets[file] = true
			end
		end
	end

	public add(path: string, realm: number)
		local filename = string.StripExtension(self:getPackage().Root .. "/" .. path)
		local action = Diamond.Loader.realms[realm] ?? Diamond.Loader.realms[DIAMOND_SHARED]

		if self.loadedFiles[filename] then
			return self:log("\t", `- ${filename}: `, Diamond.Loader.Colors.Skipped, "Skipped")
		end
		self.loadedFiles[filename] = true

		local content = action(Diamond.Loader.Realms, filename .. ".lua")
		self:log("\t", `- ${filename}: `, Diamond.Loader.Colors.Success, "Loaded")

		return content
	end

	public addDirectory(path: string, realm: number, options = {}: table)
		options = table.Merge(Diamond.Loader.BaseOptions, options)

		local content = {}

		if string.EndsWith(path, "/") then
			path = string.sub(path, #path - 1, #path)
		end

		local files, directories = file.Find(root .. "/" .. path .. "/*", "LUA")

		for i, v in ipairs(files or {}) do
			local filename = string.StripExtension(v)

			local shouldIgnore = options.FilesToIgnore[filename] or options.FilesToIgnore[v]
			continueif shouldIgnore

			local newRealm = options.Realms[filename] or options.Realms[v]

			local fullPath = path .. "/" .. filename
			files[fullPath] = self:addFile(fullPath, newRealm ?? realm)
		end

		for i, v in ipairs(directories or {}) do
			continueif not options.Recursive
			continueif options.DirectoriesToIgnore[v]

			self:addDirectory(path .. "/" .. v, realm, options)
		end

		return content
	end

	public finish()
		local { Text, Success } = Diamond.Loader.Colors

		local { Assets } = self:getPackage()
		if Assets and istable(Assets) then
			self:downloadAssets(Assets)
		end

		self:log(
			"Loaded ",
			Success, table.Count(self.loadedFiles) .. " files ",
			Text, "and downloaded ",
			Success, table.Count(self.downloadedAssets) .. " assets ",
			Text, "in ",
			Success, math.Round((SysTime() - self.startTime) * 1000, 3) .. " ms",
			Text, "."
		)

		Diamond.Loader.Cache[#Diamond.Loader.Cache + 1] = self
	end
end