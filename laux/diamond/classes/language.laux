public class Diamond.Languages
    _get _set defaultLanguage
    _get _set activeLanguage

    constructor(defaultLanguage = "english": string)
       self.cache = {}

       self:setDefaultLanguage(defaultLanguage)
       self:setActiveLanguage(self:getDefaultLanguage())
    end

    add(index: string, content: table)
        self.cache[string.StripExtension(index)] = content
        return self
    end

    addFile(path: string, index)
        if (SERVER) then
            AddCSLuaFile(path)
        end

        self:add(index ?? string.GetFileFromFilename(path), include(path) ?? {})
        return self
    end

    addDirectory(path: string)
        local files = file.Find(path .. "/*", "LUA")
        for i, v in ipairs(files) do
            self:addFile(path .. "/" .. v)
        end

        return self
    end

    async download(index: string, url: string)
        local client = Diamond.HttpClient()
        local response = await client:fetch(url)

        local content = util.JSONToTable(response:getContent()?.body) ?? {}
        self:add(index, content)

        return result
    end

    get(index, ...)
        if not index then return self.cache end
        
        local lang = self.cache[self:getActiveLanguage()] ?? self.cache[self:getDefaultLanguage()]
        local value = lang and lang[index] or index

        return value:format(...)
    end
end

Diamond.Language = Diamond.Languages()
Diamond.Language:addDirectory("diamond/languages")