public class Diamond.Collection
    constructor(tbl: table)
        self.tbl = table.Copy(tbl)
    end

    where(key, value, lower)
        key = lower and key:lower() or lower
        value = lower and value:lower() or value
        local new = {}
        for k, v of self.tbl do
            local val = lower and v[key]:lower() or v[key]
            continueif value ~= val
            new[#new + 1] = v
        end
        self.tbl = new
        return self
    end

    whereIf(cond, key, value)
        stopif not cond
        return self:where(key, value)
    end

    map(func)
        local new = {}
        for k, v of self.tbl do
            new[#new + 1] = func(v, k)
        end
        self.tbl = new
        return self
    end

    mapWithKeys(func)
        local new = {}
        for k, v of self.tbl do
            local key, value = func(v, k)
            new[key] = value
        end
        self.tbl = new
        return self
    end

    regroup(key)
        local new = {}
        for k, v of self.tbl do
            new[v[key]] = new[v[key]] or {}
            new[v[key]][#new[v[key]] + 1] = v
        end
        self.tbl = new
        return self
    end

    getKeyWhere(key, value, lower)
        value = lower and value:lower() or value
        for k, v of self.tbl do
            local founded = lower and v[key]:lower() or v[key]
            continueif istable(value) and not value[founded] or founded ~= value
            return k
        end
    end

    first()
        print(self.tbl)
        return table.GetFirstValue(self.tbl)
    end

    get()
        return self.tbl
    end
end