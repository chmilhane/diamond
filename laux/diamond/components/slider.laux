local theme = Diamond.Theme

public class Diamond.Components.Slider extends Diamond.Component
    constructor(parent, props)
        super(parent, "DButton", {
            min = {
                force = FORCE_NUMBER,
                value = 0
            },
            max = {
                force = FORCE_NUMBER,
                value = 100
            },
            fraction = {
                force = FORCE_NUMBER,
                value = 0
            },
            height = {
                force = FORCE_NUMBER,
                value = 6
            },
            color = { value = theme:get("preference") }
        }, props)
    end

    render(component)
        function component:initialize(props)
            self:SetText("")

            self.grip = vgui.Create("DButton", self)
            self.grip:SetText("")
            self.grip:NoClipping(true)
            self.grip.startSize = self:getHeight()
            self.grip.size = self.grip.startSize
            self.grip.outlineSize = self.grip.startSize
            self.grip.Paint = (this, w, h) =>
                this.outlineSize = Lerp(
                    FrameTime() * 8,
                    this.outlineSize,
                    this:IsDown() and this.startSize * 2.5 or this:IsHovered() and this.startSize * 2 or this.startSize
                )

                Diamond:DrawCircle(this.startSize, h / 2, this.outlineSize, ColorAlpha(self:getColor(), 20), 0, 360, true)
                Diamond:DrawCircle(this.startSize, h / 2, this.size, self:getColor(), 0, 360, true)
            end
            self.grip.OnMousePressed = (this) =>
                this.Depressed = true
                this:MouseCapture(true)
            end
            self.grip.OnMouseReleased = (this) =>
                this.Depressed = nil
                this:MouseCapture(false)
            end
            self.grip.OnCursorMoved = (this, x, y) =>
                stopif not this.Depressed

                local x, y = this:LocalToScreen(x, y)
                x, y = self:ScreenToLocal(x, y)

                self:setFraction(math.Clamp(x / self:GetWide(), 0, 1))

                self:onValueChanged(self:getFraction())
                self:InvalidateLayout()
            end
        end

        function component:onValueChanged(fraction, min, max)

        end

        function component:OnMousePressed()
            local x, y = self:CursorPos()
            local w = self:GetWide() + (self:getHeight() * 2)

            self:setFraction(math.Clamp(x / w, 0, 1))

            self:onValueChanged(self:getFraction(), self:getMin(), self:getMax())
            self:InvalidateLayout()
        end

        function component:Paint(w, h)
            local width = self:getFraction() * (w - (self:getHeight() / 2)) 
            local height = self:getHeight()

            local y = h / 2 - height / 2
            draw.RoundedBox(height / 2, 0, y, w, height, ColorAlpha(self:getColor(), 50))
            draw.RoundedBox(height / 2, 0, y, width, height, self:getColor())
        end

        function component:PerformLayout(w, h)
            self.grip:SetWide(h)
            self.grip:SetPos(self:getFraction() * (w - self.grip.size - (self:getHeight() / 2)))
        end

        return component
    end
end