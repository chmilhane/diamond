local theme = Diamond.Theme

public class Diamond.Components.Progress extends Diamond.Component
    constructor(parent, props)
        super(parent, "Panel", {
            fraction = {
                value = 0,
                force = FORCE_NUMBER
            },
            percentage = {
                value = false,
                force = FORCE_BOOL
            },
            border = {
                value = true,
                force = FORCE_BOOL
            }
        }, props)
    end

    render(component)
        function component:onProgressAchieved()

        end

        function component:Think()
            if self:getFraction() >= 1 then
                self:onProgressAchieved()
            end
        end

        function component:Paint(w, h)
            local r = theme:get("radius")
            local f = self:getFraction()
            local m, b = 8, self:getBorder()

            local x, y = m / 2, m / 2
            local width, height = math.Clamp(math.floor((f * w) - m), 0, w), math.Clamp(math.floor(h - m), 0, h)

            if b then
                draw.RoundedBox(r - 2, 0, 0, w, h, ColorAlpha(theme:get("black"), 120))
            end

            local color = Color(255 - f * 255, f * 255, 0)
            Diamond:DrawRoundedRect(r, x, y, width, height, color)
            Diamond:DrawRoundedTexturedRect(r, x, y, width, height, Diamond.Settings.Materials["gradient"], theme:lighten(color, -0.4))

            stopif not self:getPercentage()

            local percentage = math.Round(self:getFraction() * 100, 2)
            draw.SimpleTextOutlined(`${percentage}%`, Diamond:Font(16), width / 2, h / 2 - 1, theme:get("text"), 1, 1, 1, theme:lighten("text", -1))
        end

        return component
    end
end