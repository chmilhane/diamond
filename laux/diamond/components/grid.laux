--> https://github.com/Threebow/better-derma-grid/blob/master/threegrid.lua
public class Diamond.Components.Grid extends Diamond.Component
    constructor(parent, props)
        super(parent, "DScrollPanel", {
            horizontalMargin = {
                value = 0,
                force = FORCE_NUMBER
            },
            verticalMargin = {
                value = 0,
                force = FORCE_NUMBER
            },
            columns = {
                value = 3,
                force = FORCE_NUMBER
            }
        }, props)
    end

    render(component)
        function component:initialize(props)
            self.rows = {}
            self.cells = {}
        end

        function component:addCell(panel: Panel)
            local index = math.floor(#self.cells / self:getColumns()) + 1
            self.rows[index] = self.rows[index] or self:createRow()

            local margin = self:getHorizontalMargin()
            panel:SetParent(self.rows[index])
            panel:Dock(LEFT)
            panel:DockMargin(0, 0, #self.rows[index].items + 1 < self:getColumns() and self:getHorizontalMargin() or 0, 0)
            panel:SetWide((self:GetWide() - margin * (self:getColumns() - 1)) / self:getColumns())

            self.rows[index].items[#self.rows[index].items + 1] = panel
            self.cells[#self.cells + 1] = panel

            self:calculateRowHeight(self.rows[index])
        end

        function component:createRow()
            local row = self:Add("Panel")
            row:Dock(TOP)
            row:DockMargin(0, 0, 0, self:getVerticalMargin())
            row.items = {}

            return row
        end

        function component:calculateRowHeight(row)
            local height = 0

            for i, v of row.items do
                height = math.max(height, v:GetTall())
            end

            row:SetTall(height)
        end

        function component:skip()
            local cell = self:Add("Panel")
            self:addCell(cell)
        end

        function component:clear()
            for _, row of self.rows do
                for _, cell of row.items do
                    cell:Remove()
                end

                row:Remove()
            end

            self.cells, self.rows = {}, {}
        end

        component.onRemove = component.clear

        return component
    end
end